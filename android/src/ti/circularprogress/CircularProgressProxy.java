/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2017 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.circularprogress;

import android.animation.ArgbEvaluator;
import android.app.Activity;
import android.graphics.Color;
import android.graphics.Paint;
import android.view.LayoutInflater;
import android.widget.LinearLayout;

import com.owl93.dpb.CircularProgressView;
import com.owl93.dpb.DeterminateProgressViewListener;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiRHelper;
import org.appcelerator.titanium.view.TiUIView;


// This proxy can be created by calling TiCircularprogress.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = TiCircularprogressModule.class)
public class CircularProgressProxy extends TiViewProxy {
    // Standard Debugging variables
    private static final String LCAT = "ExampleProxy";
    private static final boolean DBG = TiConfig.LOGD;
    CircularProgressView progressBar;
    float currentProgress = 0;
    int duration = 1000;
    int trackWidth = 30;
    int trackAlpha = 100;
    int strokeWidth = 30;
    int trackColor = Color.BLACK;
    int progressColor = Color.RED;
    boolean roundedCorners = true;
    int progressColorStart = -1;
    int progressColorCenter = -1;
    int progressColorEnd = -1;
    int startingAngle = 0;

    // Constructor
    public CircularProgressProxy() {
        super();
    }

    @Override
    public TiUIView createView(Activity activity) {
        TiUIView view = new CPV(this);
        view.getLayoutParams().autoFillsHeight = true;
        view.getLayoutParams().autoFillsWidth = true;
        return view;
    }

    // Handle creation options
    @Override
    public void handleCreationDict(KrollDict options) {
        super.handleCreationDict(options);
        if (options.containsKey("progressValue")) {
            currentProgress = options.getDouble("progressValue").floatValue();
        }
        if (options.containsKey("duration")) {
            duration = options.getInt("duration");
        }
        if (options.containsKey("trackWidth")) {
            trackWidth = options.getInt("trackWidth");
        }
        if (options.containsKey("trackColor")) {
            trackColor = TiConvert.toColor(options.getString("trackColor"));
        }
        if (options.containsKey("progressColor")) {
            Object val = options.get("progressColor");
            if (val instanceof String) {
                progressColor = TiConvert.toColor(options.getString("progressColor"));
            } else if (val instanceof Object[]) {
                Object[] valObj = (Object[]) val;
                if (valObj.length == 2) {
                    progressColorStart = TiConvert.toColor((String) valObj[0]);
                    progressColorEnd = TiConvert.toColor((String) valObj[1]);
                }
                if (valObj.length == 3) {
                    progressColorStart = TiConvert.toColor((String) valObj[0]);
                    progressColorCenter = TiConvert.toColor((String) valObj[1]);
                    progressColorEnd = TiConvert.toColor((String) valObj[2]);
                }
            }
        }
        if (options.containsKey("trackAlpha")) {
            trackAlpha = options.getInt("trackAlpha");
        }
        if (options.containsKey("progressWidth")) {
            strokeWidth = options.getInt("progressWidth");
        }
        if (options.containsKey("startingAngle")) {
            startingAngle = options.getInt("startingAngle");
        }
        if (options.containsKey("roundedCorners")) {
            roundedCorners = options.getBoolean("roundedCorners");
        }
    }

    @Kroll.method
    public void animateProgress(KrollDict options) {
        if (progressBar != null) {
            int duration = (int) progressBar.getAnimationDuration();

            if (options.containsKey("startValue")) {
                currentProgress = options.getDouble("startValue").floatValue();
                progressBar.setProgress(currentProgress);
            }
            if (options.containsKey("duration")) {
                duration = options.getInt("duration");
            }
            if (options.containsKey("endValue")) {
                currentProgress = options.getDouble("endValue").floatValue();
            }
            progressBar.animateProgressChange(currentProgress, (long) duration);
        }
    }

    @Kroll.getProperty
    public float getProgressValue() {
        return progressBar.getProgress();
    }

    @Kroll.setProperty
    public void setProgressValue(float value) {
        currentProgress = value;
        if (progressBar != null) {
            if (duration == 0) {
                progressBar.setProgress(currentProgress);
            } else {
                progressBar.animateProgressChange(currentProgress, (long) duration);
            }
        }
    }

    private class CPV extends TiUIView {
        public CPV(TiViewProxy proxy) {
            super(proxy);

            int id_drawer_layout = 0;
            int id_bottomSheet = 0;
            LinearLayout layout;

            try {
                id_drawer_layout = TiRHelper.getResource("layout.main");
                id_bottomSheet = TiRHelper.getResource("id.progressBar");
            } catch (TiRHelper.ResourceNotFoundException e) {
                //
            }

            LayoutInflater inflater = LayoutInflater.from(proxy.getActivity());
            layout = (LinearLayout) inflater.inflate(id_drawer_layout, null);
            progressBar = (CircularProgressView) layout.findViewById(id_bottomSheet);

            progressBar.setProgress(currentProgress);
            progressBar.setAnimationDuration(duration);
            progressBar.setTrackWidth(trackWidth);
            progressBar.setTrackColor(trackColor);
            progressBar.setStrokeColor(progressColor);
            progressBar.setTrackAlpha(trackAlpha);
            progressBar.setStartingAngle(startingAngle);
            progressBar.setStrokeWidth(strokeWidth);
            if (roundedCorners) {
                progressBar.setStrokeEnd(Paint.Cap.ROUND);
            } else {
                progressBar.setStrokeEnd(Paint.Cap.SQUARE);
            }

            if (progressColorStart != -1 && progressColorEnd != -1) {
                progressBar.setGradientStartColor(progressColorStart);
                if (progressColorCenter != -1) {
                    progressBar.setGradientCenterColor(progressColorCenter);
                } else {
                    int color = (Integer) new ArgbEvaluator().evaluate(0.5f, progressColorStart, progressColorEnd);
                    progressBar.setGradientCenterColor(color);
                }
                progressBar.setGradientEndColor(progressColorEnd);
            }

            progressBar.setAnimationListener(new DeterminateProgressViewListener() {
                @Override
                public void onAnimationStart(float from, float to) {
                    KrollDict kd = new KrollDict();
                    kd.put("from", from);
                    kd.put("to", to);
                    fireEvent("start", kd);
                }

                @Override
                public void onAnimationEnd() {
                    currentProgress = (int) progressBar.getProgress();
                    fireEvent("done", new KrollDict());
                }

                @Override
                public void onAnimationProgress(float progress) {
                    KrollDict kd = new KrollDict();
                    kd.put("progress", progress);
                    fireEvent("progress", kd);
                }
            });
            setNativeView(layout);
        }

        @Override
        public void propertyChanged(String key, Object oldValue, Object newValue, KrollProxy proxy) {
            super.propertyChanged(key, oldValue, newValue, proxy);
            if (key.equals("duration")) {
                duration = TiConvert.toInt(newValue);
                if (progressBar != null) progressBar.setAnimationDuration(duration);
            }
            if (key.equals("progressWidth")) {
                strokeWidth = TiConvert.toInt(newValue);
                if (progressBar != null) progressBar.setStrokeWidth(strokeWidth);
            }
            if (key.equals("trackWidth")) {
                trackWidth = TiConvert.toInt(newValue);
                if (progressBar != null) progressBar.setTrackWidth(trackWidth);
            }
            if (key.equals("trackColor")) {
                trackColor = TiConvert.toColor((String) newValue);
                if (progressBar != null) progressBar.setTrackColor(trackColor);
            }
            if (key.equals("progressColor")) {
                if (newValue instanceof String) {
                    progressColor = TiConvert.toColor((String) newValue);

                    if (progressBar != null) {
                        progressBar.setStrokeColor(progressColor);
                        progressBar.setGradientStartColor(0);
                        progressBar.setGradientCenterColor(0);
                        progressBar.setGradientEndColor(0);
                    }
                } else if (newValue instanceof Object[]) {
                    Object[] valObj = (Object[]) newValue;
                    if (valObj.length == 2) {
                        progressColorStart = TiConvert.toColor((String) valObj[0]);
                        progressColorEnd = TiConvert.toColor((String) valObj[1]);
                        progressColorCenter = -1;
                    }
                    if (valObj.length == 3) {
                        progressColorStart = TiConvert.toColor((String) valObj[0]);
                        progressColorCenter = TiConvert.toColor((String) valObj[1]);
                        progressColorEnd = TiConvert.toColor((String) valObj[2]);
                    }
                    if (progressBar != null) {
                        progressBar.setGradientStartColor(progressColorStart);
                        if (progressColorCenter != -1) {
                            progressBar.setGradientCenterColor(progressColorCenter);
                        } else {
                            int color = (Integer) new ArgbEvaluator().evaluate(0.5f, progressColorStart, progressColorEnd);
                            progressBar.setGradientCenterColor(color);
                        }
                        progressBar.setGradientEndColor(progressColorEnd);
                    }
                }
            }
            if (key.equals("trackAlpha")) {
                trackAlpha = TiConvert.toInt(newValue);
                if (progressBar != null) progressBar.setTrackAlpha(trackAlpha);
            }

            if (key.equals("startingAngle")) {
                startingAngle = TiConvert.toInt(newValue);
                if (progressBar != null) progressBar.setStartingAngle(startingAngle);
            }

            if (key.equals("roundedCorners")) {
                roundedCorners = TiConvert.toBoolean(newValue);
                if (progressBar != null) {
                    if (roundedCorners) {
                        progressBar.setStrokeEnd(Paint.Cap.ROUND);
                    } else {
                        progressBar.setStrokeEnd(Paint.Cap.SQUARE);
                    }
                }
            }
        }

        @Override
        public void processProperties(KrollDict d) {
            super.processProperties(d);

        }
    }

}
